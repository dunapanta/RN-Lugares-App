yarn add react-navigation
yarn add react-navigation-stack
yarn add react-native-reanimated react-native-gesture-handler
yarn add react-navigation-header-buttons@6
yarn add @expo/vector-icons
expo install react-native-screen
yarn add redux react-redux redux-thunk

import { createAppContainer } from 'react-navigation';
import { createStackNavigator } from 'react-navigation-stack';


238 Camara
en Expo se puede utilizar Camera (con mas configuraciones) o ImagePicker
Utilizo ImagePicker porque es simplemente para tomar imagenes 

expo install expo-image-picker

NO necesito a침adir mas configuraciones simplemente instalando ya esta para usar

import * as ImagePicker from 'expo-image-picker'

const takeImageHandler = () => {
        //abrira la camara del dispositivo, esta func retorna un a promesa
        ImagePicker.launchCameraAsync()
    }

En android pide permiso para usar la camara esto ya lo hace expo por atras
en ios da un warning porq los permisos funcionan diferente en ios y se tiene que pedir al usuario permiso

de nuevo para pedir permiso se utiliza otro paquete de expo Permissions

expo install expo-permissions

const verifyPermissions = async () => {
        const result = await Permissions.askAsync(Permissions.CAMERA, Permissions.CAMERA_ROLL)
        // para la galeria el permiso es CAMERA_ROLL

        if(result.status !== 'granted'){
            //Si el usuario declino el permiso
            Alert.alert('Permiso denegado', 'Debe otorgar permisos de c치mara para usar esta funci칩n', 
            [{text: 'Aceptar'}])
            return false
        }
        return true
    }

const takeImageHandler = async () => {
        //permiso de camara
        const hasPermission = await verifyPermissions()
        if(!hasPermission){
            return
        }
        //abrira la camara del dispositivo, esta func retorna un a promesa
        ImagePicker.launchCameraAsync()
    }


241 Almacenar Imagen en FileSystem

expo install expo-file-system

se implementa en action

import * as FileSystem from 'expo-file-system'

export const ADD_PLACE = 'ADD_PLACE'

export const addPlace = (title, image) => {
    return async dispatch => {
        // el path necesita incluir el nombre del archivo que se usara en el futuro
        const fileName = image.split('/').pop()
        // documentDirectory is the main directory, if the user uninstall the app the folder also  will be erase
        const newPath = FileSystem.documentDirectory + fileName
        try{
            // move a file from a to b
            await FileSystem.moveAsync({
                from: image, //the path temporary directory that expo provides
                to: newPath
            })
        }catch(err){
            console.log(err)
            throw err
        }

        dispatch({
            type: ADD_PLACE,
            placeData: {
                title: title,
                image: newPath
            }
        })
    }
}


243 SQLite

expo install expo-sqlite

se necesita abrir una conexion a la bd si no existe la bd la crea

import * as SQLite from 'expo-sqlite';

import * as SQLite from 'expo-sqlite';

//El c칩digo se ejecuta cuando importamos este archivo 
const db = SQLite.openDatabase('places.db')

export const init = () => {
    const promise = new Promise((resolve, reject) => {
        // crear tablas
        db.transaction( (tx) => {
            tx.executeSql('CREATE TABLE IF NOT EXISTS places (id INTEGER PRIMARY KEY NOT NULL, title TEXT NOT NULL, imageUri TEXT NOT NULL, address TEXT NOT NULL, lat REAL NOT NULL, lng REAL NOT NULL);', 
            [],
            () => {
                //success function
                resolve()
            },
            (_, err) => {
                // error function
                reject(err)
            }
            )
        })
    })
    return promise
}


en APP JS

import { init } from './helpers/db'

init().then( () => {
  console.log('Initialized database')
}).catch(err => {
  console.log('Initialized database failed')
  console.log(err)
})

244 Almacenar datos en SQLite
//Store Data
export const insertPlace  = (title, imagaUri, address, lat, lng) => {
    const promise = new Promise((resolve, reject) => {
        db.transaction( (tx) => {
            tx.executeSql(
                //no se debe utilizar templete string porque se podria dar sql injection ej en vez de title ingresan un comando sql
                // por eso se usa ?
                `INSERT INTO places (title, imageUri, address, lat, lng) VALUES (?, ?, ?, ?, ?);`, 
                [title, imagaUri, address, lat, lng],
                (_, result) => {
                    //success function
                    resolve(result)
                },
                (_, err) => {
                    // error function
                    reject(err)
                }
                )
        })
    })
    return promise
}

246 Instalar Location
expo install expo-location
se implementa en LocationPicker